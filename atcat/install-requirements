#!/bin/sh

#=====================================================================
# realpath.sh
#   https://github.com/mkropat/sh-realpath
#
# by Michael Kropat, aka mkropat
#   http://mkropat.github.io/
#=====================================================================

# The MIT License (MIT)
#
# Copyright (c) 2014 Michael Kropat
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# The software is provided "as is", without warranty of any kind, express or
# implied, including but not limited to the warranties of merchantability,
# fitness for a particular purpose and noninfringement. In no event shall the
# authors or copyright holders be liable for any claim, damages or other
# liability, whether in an action of contract, tort or otherwise, arising from,
# out of or in connection with the software or the use or other dealings in
# the software.

realpath() {
    canonicalize_path "$(resolve_symlinks "$1")"
}

resolve_symlinks() {
    _resolve_symlinks "$1"
}

_resolve_symlinks() {
    _assert_no_path_cycles "$@" || return

    local dir_context path
    path=$(readlink -- "$1")
    if [ $? -eq 0 ]; then
        dir_context=$(dirname -- "$1")
        _resolve_symlinks "$(_prepend_dir_context_if_necessary "$dir_context" "$path")" "$@"
    else
        printf '%s\n' "$1"
    fi
}

_prepend_dir_context_if_necessary() {
    if [ "$1" = . ]; then
        printf '%s\n' "$2"
    else
        _prepend_path_if_relative "$1" "$2"
    fi
}

_prepend_path_if_relative() {
    case "$2" in
        /* ) printf '%s\n' "$2" ;;
         * ) printf '%s\n' "$1/$2" ;;
    esac
}

_assert_no_path_cycles() {
    local target path

    target=$1
    shift

    for path in "$@"; do
        if [ "$path" = "$target" ]; then
            return 1
        fi
    done
}

canonicalize_path() {
    if [ -d "$1" ]; then
        _canonicalize_dir_path "$1"
    else
        _canonicalize_file_path "$1"
    fi
}

_canonicalize_dir_path() {
    (cd "$1" 2>/dev/null && pwd -P)
}

_canonicalize_file_path() {
    local dir file
    dir=$(dirname -- "$1")
    file=$(basename -- "$1")
    (cd "$dir" 2>/dev/null && printf '%s/%s\n' "$(pwd -P)" "$file")
}


#=====================================================================
# store the absolute path to this script.
#=====================================================================

scriptfile="$(canonicalize_path "$(resolve_symlinks "$0")")"
scriptdir="$(dirname "$scriptfile")"




#=====================================================================
# install prerequisites for various sos utilities.
#=====================================================================

cat <<'EOF'

#=====================================================================
# pip.
#
# For installing python modules, e.g. `pip install natsort`
#=====================================================================
EOF

if [[ -z "`which pip`" ]]; then
cat <<'EOF'
sudo easy_install pip
EOF
sudo easy_install pip
else
  echo "pip already installed."
fi


cat <<'EOF'

#=====================================================================
# pip install natsort
#
# Used by `natsort`, `humansizesort`, etc.
#=====================================================================
EOF

cat <<'EOF'
sudo pip install natsort
EOF
sudo pip install natsort


cat <<'EOF'
#=====================================================================
# pip install splinter
# https://splinter.readthedocs.org/en/latest/
#
# Browser automation.  Used by `avail`.
#=====================================================================
EOF

cat <<'EOF'
sudo pip install splinter
EOF
sudo pip install splinter



cat <<'EOF'

#=====================================================================
# Install homebrew.
#=====================================================================
EOF

if [[ -z "`which brew`" ]]; then
cat <<'EOF'
ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
EOF
ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
else
  echo "Homebrew already installed."
fi

# cat <<'EOF'
# #=====================================================================
# # Updating homebrew.
# #=====================================================================
# EOF

# cat <<'EOF'
# brew update
# EOF
# brew update


cat <<'EOF'

#=====================================================================
# ag.
#
# To search recursively through files for a phrase.
#=====================================================================
EOF

cat <<'EOF'
brew install ag
EOF
brew install ag


cat <<'EOF'

#=====================================================================
# sf-pwgen.
#
# `pws` uses sf-pwgen to generate memorable passwords.
#=====================================================================
EOF

cat <<'EOF'
brew install sf-pwgen
EOF
brew install sf-pwgen


cat <<'EOF'

#=====================================================================
# tree and pypy.
#
# `l` uses tree to function and pypy to function quickly.
#=====================================================================
EOF

cat <<'EOF'
brew install tree
EOF
brew install tree

cat <<'EOF'
brew install pypy
EOF
brew install pypy


cat <<'EOF'

#=====================================================================
# ghead, from coreutils.
#
# `skip-last-n-lines` needs ghead, since osx's version of `head`
# doesn't support negative numbers.
#=====================================================================
EOF

cat <<'EOF'
brew install coreutils 
EOF
brew install coreutils 


cat <<'EOF'

#=====================================================================
# sponge, from moreutils.
#
# To use a file as both input and output.
# e.g.  `cat foo.txt | replace ' ' '\n' | sponge foo.txt`
#=====================================================================
EOF

cat <<'EOF'
brew install moreutils
EOF
brew install moreutils


cat <<'EOF'

#=====================================================================
# wget.
#
# For downloading a URL as a file or webpage.  Used by `wgetfiles`.
#=====================================================================
EOF

cat <<'EOF'
brew install wget 
EOF
brew install wget 



cat <<'EOF'

#=====================================================================
# nmap.
#
# Swiss army knife of networking.  Used by `pingsweep`, `portscan`,
# et al.
#=====================================================================
EOF

cat <<'EOF'
brew install nmap 
EOF
brew install nmap 


cat <<'EOF'

#=====================================================================
# arp-scan.
#
# For seeing who's on your local network.  Used by `netinfo-arp-scan`.
#=====================================================================
EOF

cat <<'EOF'
brew install arp-scan 
EOF
brew install arp-scan 


cat <<'EOF'
#---------------------------------------------------------------------
# A tutorial on `sos` networking utils
#---------------------------------------------------------------------
#
# Use `netinfo-arp-scan` to map out a local network (useful after
# SSHing into unknown territory):
#
#   $ netinfo-arp-scan
#
# Use `pingsweep` to determine whether hosts are alive:
#
#   Ping an IP using TCP connect.
#   $ pingsweep 192.168.1.1
#
#   Ping a range of IPs using TCP connect.
#   $ pingsweep 192.168.1.0/24
#
# Use `portscan*` to detect open ports and try to determine the name
# and version number of running services:
#
#   Portscan + service fingerprint a box.  (Note: This will
#   scan+fingerprint all 65,536 ports, which can be slow.)
#   $ portscan 1.2.3.4
#
#   Portscan + service fingerprint the 1,000 most common ports, which
#   as of 2008 will catch ~93% of open TCP ports.  (See [1].)
#   $ portscan2 1.2.3.4
#
#   Portscan and service fingerprint the 100 most common ports.  (Try
#   to stick with `portscan2` unless you're scanning a lot of IPs.
#   Scanning 1,000 ports will give you a much more interesting view of
#   the host.)
#   $ portscan3 1.2.3.4
#
#   Scan port 80 and port 443.
#   $ portscan2 1.2.3.4 -p80,443
#
#   Scan port 8080, 8443, and ports 1 through 1024.
#   $ portscan2 1.2.3.4 -p8080,8443,1-1024
#   
# Use `netscan` to detect and portscan everyone on your network.
# (It's interesting to run this at a hotel|starbucks|workplace.)
# 
#   $ netscan
#
#
# [1] https://web.archive.org/web/20131028071915/http://jahboite.co.uk/blog/2008/09/nmap-4-75-new-features.html
#
# "As of 2008, about 93% of open TCP ports and roughly 98% of open UDP
# ports are found on average with `portscan2`."
#
#---------------------------------------------------------------------
# CIDR notation
#---------------------------------------------------------------------
#
# You can use CIDR notation, since these scripts are simply wrappers
# around `nmap`.
#
#   Ping all IPs from 192.168.1.1 through 192.168.1.255.
#
#   $ pingsweep 192.168.1.0/24
#
#   Starting Nmap 6.47 ( http://nmap.org ) at 2015-07-17 08:43 CDT
#   192.168.1.1 Host is up, received syn-ack (0.027s latency).
#   192.168.1.100 Host is up, received conn-refused (0.00019s latency).
#   192.168.1.106 Host is up, received conn-refused (0.067s latency).
#   192.168.1.115 Host is up, received conn-refused (0.053s latency).
#   192.168.1.123 Host is up, received conn-refused (0.052s latency).
#   Nmap done: 256 IP addresses (5 hosts up) scanned in 4.22 seconds
#
#---------------------------------------------------------------------
# `beautify-portscan`
#---------------------------------------------------------------------
#
# Note that you can pipe the output of any `portscan*` script into
# `beautify-portscan`, which makes it much easier to read.
#
# (You can actually pipe in any nmap "greppable" output, for what it's
# worth; all `portscan*` scripts configure nmap to use "greppable"
# output.)
#
# Compare:
#
#   $ portscan3 8.8.8.8
#   
#   nmap -F -Pn -oG --initial-rtt-timeout=100ms --max-rtt-timeout=500ms --max-retries=2 -vv -sV -sT --version-light 8.8.8.8
#   Nmap 6.47 scan initiated Fri Jul 17 08:05:54 2015 as: nmap -F -Pn -oG - --initial-rtt-timeout=100ms --max-rtt-timeout=500ms --max-retries=2 -vv -sV -sT --version-light 8.8.8.8
#   Ports scanned: TCP(100;7,9,13,21-23,25-26,37,53,79-81,88,106,110-111,113,119,135,139,143-144,179,199,389,427,443-445,465,513-515,543-544,548,554,587,631,646,873,990,993,995,1025-1029,1110,1433,1720,1723,1755,1900,2000-2001,2049,2121,2717,3000,3128,3306,3389,3986,4899,5000,5009,5051,5060,5101,5190,5357,5432,5631,5666,5800,5900,6000-6001,6646,7070,8000,8008-8009,8080-8081,8443,8888,9100,9999-10000,32768,49152-49157) UDP(0;) SCTP(0;) PROTOCOLS(0;)
#   Host: 8.8.8.8 (google-public-dns-a.google.com)	Status: Up
#   Host: 8.8.8.8 (google-public-dns-a.google.com)	Ports: 53/open/tcp//tcpwrapped///	Ignored State: filtered (99)
#   Nmap done at Fri Jul 17 08:05:59 2015 -- 1 IP address (1 host up) scanned in 4.83 seconds
#   
#   $ portscan3 8.8.8.8 | beautify-portscan
#   
#   8.8.8.8  53        open  tcp  tcpwrapped
#   8.8.8.8  filtered  (99)
#
#
# So, out of the 100 ports we scanned, only port 53 was open.  Here's
# a more interesting example:
#
#
#   $ portscan3 news.ycombinator.com
#   
#   nmap -F -Pn -oG --initial-rtt-timeout=100ms --max-rtt-timeout=500ms --max-retries=2 -vv -sV -sT --version-light news.ycombinator.com
#   Nmap 6.47 scan initiated Fri Jul 17 08:19:16 2015 as: nmap -F -Pn -oG - --initial-rtt-timeout=100ms --max-rtt-timeout=500ms --max-retries=2 -vv -sV -sT --version-light news.ycombinator.com
#   Ports scanned: TCP(100;7,9,13,21-23,25-26,37,53,79-81,88,106,110-111,113,119,135,139,143-144,179,199,389,427,443-445,465,513-515,543-544,548,554,587,631,646,873,990,993,995,1025-1029,1110,1433,1720,1723,1755,1900,2000-2001,2049,2121,2717,3000,3128,3306,3389,3986,4899,5000,5009,5051,5060,5101,5190,5357,5432,5631,5666,5800,5900,6000-6001,6646,7070,8000,8008-8009,8080-8081,8443,8888,9100,9999-10000,32768,49152-49157) UDP(0;) SCTP(0;) PROTOCOLS(0;)
#   Warning: Hostname news.ycombinator.com resolves to 2 IPs. Using 198.41.190.47.
#   Host: 198.41.190.47 ()	Status: Up
#   Host: 198.41.190.47 ()	Ports: 80/open/tcp//http//cloudflare-nginx/, 443/open/tcp//ssl|https//cloudflare-nginx/, 8080/open/tcp//http//cloudflare-nginx/, 8443/open/tcp//ssl|https-alt?///	Ignored State: filtered (96)
#   Nmap done at Fri Jul 17 08:19:42 2015 -- 1 IP address (1 host up) scanned in 25.86 seconds
#   
#   $ portscan3 news.ycombinator.com | beautify-portscan
#   
#   Warning: Hostname news.ycombinator.com resolves to 2 IPs. Using 198.41.190.47.
#   198.41.190.47  80        open  tcp  http            cloudflare-nginx
#   198.41.190.47  443       open  tcp  ssl|https       cloudflare-nginx
#   198.41.190.47  8080      open  tcp  http            cloudflare-nginx
#   198.41.190.47  8443      open  tcp  ssl|https-alt?
#   198.41.190.47  filtered  (96)
#
# 
# They're using cloudflare.  The box has open http ports 80 and
# 8080, and open https ports on 443 and 8443.
#
# Note that you'll want to use portscan2 most of the time.  Remember:
# `portscan` scans all 65536 ports.  `portscan2` scans the top 1000,
# which catches ~90% of them.  `portscan3` scans the top 100 ports,
# which is mainly useful when you're scanning a lot of IPs.
#



EOF

