#!/usr/bin/env python

#==============================================================================
# Functionality
#==============================================================================
import pdb
import sys
import os
import re

# utility funcs, classes, etc go here.

def asserting(cond):
    if not cond:
        pdb.set_trace()
    assert(cond)

def has_stdin():
    return not sys.stdin.isatty()

def reg(pat, flags=0):
    return re.compile(pat, re.VERBOSE | flags)

#==============================================================================
# Cmdline
#==============================================================================
import argparse

parser = argparse.ArgumentParser(formatter_class=argparse.RawTextHelpFormatter, 
    description="""
TODO
""")
     
parser.add_argument('-v', '--verbose',
    action="store_true",
    help="verbose output" )
     
parser.add_argument('--nofork',
    action="store_true",
    help="process sequentially, no forking.")
     
parser.add_argument('-o', '--only',
    action="append",
    help="only check [github, reddit, gmail, twitter, hn]")
     
parser.add_argument('-s', '--skip',
    action="append",
    help="skip [github, reddit, gmail, twitter, hn]")
     
parser.add_argument('-rg', '--register-gmail',
    action="store_true",
    help="whether to register the gmail account." )

args = None

#==============================================================================
# Main
#==============================================================================

from splinter.request_handler.status_code import HttpResponseError
from splinter import Browser
import time
import os

forever = 999999.0

def wait(b, fnEl, fnWaitFor=None, total=forever, delay=0.00):
    start = time.time()
    while True:
        el = fnEl(b)
        if el:
            ret = el
            if fnWaitFor:
                ret = fnWaitFor(el)
            if ret:
                return el
        time.sleep(delay)
        now = time.time()
        if (now - start) >= total:
            break

def waitvis(b, fnEl, total=forever, delay=0.00):
    return wait(b, fnEl, lambda e: e.visible, total=total, delay=delay)

def waitnav(b, prev_url, total=forever, delay=0.00):
    while b.url == prev_url:
        time.sleep(delay)
    return b.url

def waitname(b, name, total=forever):
    return b.is_element_present_by_name(name, total)

def waitcss(b, css, total=forever):
    return b.is_element_present_by_css(css, total)

def waitanycss(b, csslst, total=forever, delay=0.05):
    start = time.time()
    while True:
        for css in csslst:
            if b.is_element_present_by_css(css):
                return css
        now = time.time()
        if (now - start) > total:
            break
        time.sleep(delay)

def waitid(b, id, total=forever):
    return b.is_element_present_by_id(id, total)

def handle_captcha(b, name):
    #el = waitvis(b, lambda b: b.find_by_name('captchaanswerresponse'))
    #if waitname('captchaanswerresponse', 2.0):
    if waitname(b, 'captchaanswerresponse', 0.0):
        if args.verbose:
            print 'captcha for %s@gmail.com' % name
        #el.click()
        b.is_element_not_present_by_name('captchaanswerresponse', wait_time=forever)
        # while waitname(b, 'captchaanswerresponse', 0.1):
        #     pass
        #wait(b, lambda b: not b.find_by_name('captchaanswerresponse'), total=forever)
        if args.verbose:
            print 'complated captcha for %s@gmail.com' % name
        return True

def typing(text, elt, delay=0.1):
    for typing in elt.type(text, True):
        time.sleep(delay)

gmail_url = 'https://www.google.com/accounts/recovery/verifyuser'
gmail_prn = '{}@gmail.com'
def gmail_avail(b, name):
    b.find_by_id('3').click()
    waitvis(b, lambda b: b.find_by_name('Email2'))
    typing(name, b.find_by_name('Email2'))
    b.find_by_value('Continue').click()
    #
    handle_captcha(b, name)
    #
    return b.is_element_present_by_css('.errormsg')

reddit_url = 'https://json.reddit.com/u/{}.json'
reddit_prn = '/u/{}'
def reddit_avail(b, name):
    return b.html.find('children": [{') < 0
    #return b.is_element_not_present_by_css('.side')

github_url = 'https://github.com/{}'
github_prn = 'github.com/{}'
def github_avail(b, name):
    return b.is_element_not_present_by_id('site-container')

twitter_url = 'https://twitter.com/{}'
twitter_prn = '@{}'
def twitter_avail(b, name):
    return b.is_element_not_present_by_css('.ProfileSidebar')

hn_url = 'https://news.ycombinator.com/user?id={}'
hn_prn = "hn '{}"
def hn_avail(b, name):
    return b.html.find('No such user') >= 0

def forkurl(url, thunk, success, name):
    if not args.nofork:
        pid = os.fork()
    else:
        pid = 0
    if pid == 0:
        b = Browser()
        try:
            b.visit(url.format(name))
            if thunk(b, name):
                print success.format(name)
            else:
                if args.verbose:
                    print "not available: %s" % success.format(name)
        except HttpResponseError as e:
            if e.status_code == 404:
                print success.format(name)
            else:
                print "bad request code[%s] \n\tname[%s] \n\tprn[%s] \n\turl[%s]" % (e.status_code, name, success.format(name), url.format(name))
                raise e
        finally:
            b.quit()
            if not args.nofork:
                sys.exit(0)
    return pid
    

def should(which):
    if args.skip and which in args.skip:
        return False
    if args.only and not which in args.only:
        return False
    return True

def avail(name):
    if should('gmail'): yield forkurl(gmail_url, gmail_avail, gmail_prn, name)
    if should('reddit'): yield forkurl(reddit_url, reddit_avail, reddit_prn, name)
    if should('github'): yield forkurl(github_url, github_avail, github_prn, name)
    if should('twitter'): yield forkurl(twitter_url, twitter_avail, twitter_prn, name)
    #if should('hn'): yield forkurl(hn_url, hn_avail, hn_prn, name)
    

def run():
    if args.verbose:
        print args
    if len(args.args) <= 0 and not has_stdin():
        # if there were no args and there was no input, prompt user.
        print 'Enter input (press Ctrl-D when done):'
    if len(args.args) <= 0 or has_stdin():
        indata = sys.stdin.read()
    # for each arg on cmdline...
    pids = []
    for arg in args.args:
        for name in arg.split(' '):
            pids += [pid for pid in avail(name)]
    for pid in pids:
        if pid != 0:
            os.waitpid(pid, 0)

def main():
    global args
    if not args:
        args, leftovers = parser.parse_known_args()
        args.args = leftovers
    return run()

if __name__ == "__main__":
    main()

